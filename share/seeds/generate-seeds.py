#!/usr/bin/python
# copyright (c) 2014 wladmir j. van der laan
# distributed under the mit software license, see the accompanying
# file copying or http://www.opensource.org/licenses/mit-license.php.
'''
script to generate list of seed nodes for chainparams.cpp.

this script expects two text files in the directory that is passed as an
argument:

    nodes_main.txt
    nodes_test.txt

these files must consist of lines in the format 

    <ip>
    <ip>:<port>
    [<ipv6>]
    [<ipv6>]:<port>
    <onion>.onion
    0xddbbccaa (ipv4 little-endian old pnseeds format)

the output will be two data structures with the peers in binary format:

   static seedspec6 pnseed6_main[]={
   ...
   }
   static seedspec6 pnseed6_test[]={
   ...
   }

these should be pasted into `src/chainparamsseeds.h`.
'''
from __future__ import print_function, division
from base64 import b32decode
from binascii import a2b_hex
import sys, os
import re

# ipv4 in ipv6 prefix
pchipv4 = bytearray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff])
# tor-specific ipv6 prefix
pchonioncat = bytearray([0xfd,0x87,0xd8,0x7e,0xeb,0x43])

def name_to_ipv6(addr):
    if len(addr)>6 and addr.endswith('.onion'):
        vchaddr = b32decode(addr[0:-6], true)
        if len(vchaddr) != 16-len(pchonioncat):
            raise valueerror('invalid onion %s' % s)
        return pchonioncat + vchaddr
    elif '.' in addr: # ipv4
        return pchipv4 + bytearray((int(x) for x in addr.split('.')))
    elif ':' in addr: # ipv6
        sub = [[], []] # prefix, suffix
        x = 0
        addr = addr.split(':')
        for i,comp in enumerate(addr):
            if comp == '':
                if i == 0 or i == (len(addr)-1): # skip empty component at beginning or end
                    continue
                x += 1 # :: skips to suffix
                assert(x < 2)
            else: # two bytes per component
                val = int(comp, 16)
                sub[x].append(val >> 8)
                sub[x].append(val & 0xff)
        nullbytes = 16 - len(sub[0]) - len(sub[1])
        assert((x == 0 and nullbytes == 0) or (x == 1 and nullbytes > 0))
        return bytearray(sub[0] + ([0] * nullbytes) + sub[1])
    elif addr.startswith('0x'): # ipv4-in-little-endian
        return pchipv4 + bytearray(reversed(a2b_hex(addr[2:])))
    else:
        raise valueerror('could not parse address %s' % addr)

def parse_spec(s, defaultport):
    match = re.match('\[([0-9a-fa-f:]+)\](?::([0-9]+))?$', s)
    if match: # ipv6
        host = match.group(1)
        port = match.group(2)
    else:
        (host,_,port) = s.partition(':')

    if not port:
        port = defaultport
    else:
        port = int(port)

    host = name_to_ipv6(host)

    return (host,port)

def process_nodes(g, f, structname, defaultport):
    g.write('static seedspec6 %s[] = {\n' % structname)
    first = true
    for line in f:
        comment = line.find('#')
        if comment != -1:
            line = line[0:comment]
        line = line.strip()
        if not line:
            continue
        if not first:
            g.write(',\n')
        first = false

        (host,port) = parse_spec(line, defaultport)
        hoststr = ','.join(('0x%02x' % b) for b in host)
        g.write('    {{%s}, %i}' % (hoststr, port))
    g.write('\n};\n')

def main():
    if len(sys.argv)<2:
        print(('usage: %s <path_to_nodes_txt>' % sys.argv[0]), file=sys.stderr)
        exit(1)
    g = sys.stdout
    indir = sys.argv[1]
    g.write('#ifndef moorecoin_chainparamsseeds_h\n')
    g.write('#define moorecoin_chainparamsseeds_h\n')
    g.write('/**\n')
    g.write(' * list of fixed seed nodes for the moorecoin network\n')
    g.write(' * autogenerated by share/seeds/generate-seeds.py\n')
    g.write(' *\n')
    g.write(' * each line contains a 16-byte ipv6 address and a port.\n')
    g.write(' * ipv4 as well as onion addresses are wrapped inside a ipv6 address accordingly.\n')
    g.write(' */\n')
    with open(os.path.join(indir,'nodes_main.txt'),'r') as f:
        process_nodes(g, f, 'pnseed6_main', 8333)
    g.write('\n')
    with open(os.path.join(indir,'nodes_test.txt'),'r') as f:
        process_nodes(g, f, 'pnseed6_test', 18333)
    g.write('#endif // moorecoin_chainparamsseeds_h\n')
            
if __name__ == '__main__':
    main()

