// copyright (c) 2012-2014 the moorecoin core developers
// distributed under the mit software license, see the accompanying
// file copying or http://www.opensource.org/licenses/mit-license.php.

#include "clientversion.h"

#include "tinyformat.h"

#include <string>

/**
 * name of client reported in the 'version' message. report the same name
 * for both moorecoind and moorecoin-core, to make it harder for attackers to
 * target servers or gui users specifically.
 */
const std::string client_name("satoshi");

/**
 * client version number
 */
#define client_version_suffix ""


/**
 * the following part of the code determines the client_build variable.
 * several mechanisms are used for this:
 * * first, if have_build_info is defined, include build.h, a file that is
 *   generated by the build environment, possibly containing the output
 *   of git-describe in a macro called build_desc
 * * secondly, if this is an exported version of the code, git_archive will
 *   be defined (automatically using the export-subst git attribute), and
 *   git_commit will contain the commit id.
 * * then, three options exist for determining client_build:
 *   * if build_desc is defined, use that literally (output of git-describe)
 *   * if not, but git_commit is defined, use v[maj].[min].[rev].[build]-g[commit]
 *   * otherwise, use v[maj].[min].[rev].[build]-unk
 * finally client_version_suffix is added
 */

//! first, include build.h if requested
#ifdef have_build_info
#include "build.h"
#endif

//! git will put "#define git_archive 1" on the next line inside archives. 
#define git_archive 1
#ifdef git_archive
#define git_commit_id "e307e13"
#define git_commit_date "mon, 22 jun 2015 09:57:45 +0200"
#endif

#define build_desc_with_suffix(maj, min, rev, build, suffix) \
    "v" do_stringize(maj) "." do_stringize(min) "." do_stringize(rev) "." do_stringize(build) "-" do_stringize(suffix)

#define build_desc_from_commit(maj, min, rev, build, commit) \
    "v" do_stringize(maj) "." do_stringize(min) "." do_stringize(rev) "." do_stringize(build) "-g" commit

#define build_desc_from_unknown(maj, min, rev, build) \
    "v" do_stringize(maj) "." do_stringize(min) "." do_stringize(rev) "." do_stringize(build) "-unk"

#ifndef build_desc
#ifdef build_suffix
#define build_desc build_desc_with_suffix(client_version_major, client_version_minor, client_version_revision, client_version_build, build_suffix)
#elif defined(git_commit_id)
#define build_desc build_desc_from_commit(client_version_major, client_version_minor, client_version_revision, client_version_build, git_commit_id)
#else
#define build_desc build_desc_from_unknown(client_version_major, client_version_minor, client_version_revision, client_version_build)
#endif
#endif

#ifndef build_date
#ifdef git_commit_date
#define build_date git_commit_date
#else
#define build_date __date__ ", " __time__
#endif
#endif

const std::string client_build(build_desc client_version_suffix);
const std::string client_date(build_date);

static std::string formatversion(int nversion)
{
    if (nversion % 100 == 0)
        return strprintf("%d.%d.%d", nversion / 1000000, (nversion / 10000) % 100, (nversion / 100) % 100);
    else
        return strprintf("%d.%d.%d.%d", nversion / 1000000, (nversion / 10000) % 100, (nversion / 100) % 100, nversion % 100);
}

std::string formatfullversion()
{
    return client_build;
}

/** 
 * format the subversion field according to bip 14 spec (https://github.com/moorecoin/bips/blob/master/bip-0014.mediawiki) 
 */
std::string formatsubversion(const std::string& name, int nclientversion, const std::vector<std::string>& comments)
{
    std::ostringstream ss;
    ss << "/";
    ss << name << ":" << formatversion(nclientversion);
    if (!comments.empty())
    {
        std::vector<std::string>::const_iterator it(comments.begin());
        ss << "(" << *it;
        for(++it; it != comments.end(); ++it)
            ss << "; " << *it;
        ss << ")";
    }
    ss << "/";
    return ss.str();
}
