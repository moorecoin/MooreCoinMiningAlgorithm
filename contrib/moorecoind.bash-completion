# bash programmable completion for bitcoind(1) and bitcoin-cli(1)
# copyright (c) 2012,2014 christian von roques <roques@mti.ag>
# distributed under the mit software license, see the accompanying
# file copying or http://www.opensource.org/licenses/mit-license.php.

have bitcoind && {

# call $bitcoind for rpc
_bitcoin_rpc() {
    # determine already specified args necessary for rpc
    local rpcargs=()
    for i in ${comp_line}; do
        case "$i" in
            -conf=*|-proxy*|-rpc*)
                rpcargs=( "${rpcargs[@]}" "$i" )
                ;;
        esac
    done
    $bitcoind "${rpcargs[@]}" "$@"
}

# add bitcoin accounts to compreply
_bitcoin_accounts() {
    local accounts
    accounts=$(_bitcoin_rpc listaccounts | awk '/".*"/ { a=$1; gsub(/"/, "", a); print a}')
    compreply=( "${compreply[@]}" $( compgen -w "$accounts" -- "$cur" ) )
}

_bitcoind() {
    local cur prev words=() cword
    local bitcoind

    # save and use original argument to invoke bitcoind
    # bitcoind might not be in $path
    bitcoind="$1"

    compreply=()
    _get_comp_words_by_ref -n = cur prev words cword

    if ((cword > 4)); then
        case ${words[cword-4]} in
            listtransactions)
                compreply=( $( compgen -w "true false" -- "$cur" ) )
                return 0
                ;;
            signrawtransaction)
                compreply=( $( compgen -w "all none single all|anyonecanpay none|anyonecanpay single|anyonecanpay" -- "$cur" ) )
                return 0
                ;;
        esac
    fi

    if ((cword > 3)); then
        case ${words[cword-3]} in
            addmultisigaddress)
                _bitcoin_accounts
                return 0
                ;;
            getbalance|gettxout|importaddress|importprivkey|listreceivedbyaccount|listreceivedbyaddress|listsinceblock)
                compreply=( $( compgen -w "true false" -- "$cur" ) )
                return 0
                ;;
        esac
    fi

    if ((cword > 2)); then
        case ${words[cword-2]} in
            addnode)
                compreply=( $( compgen -w "add remove onetry" -- "$cur" ) )
                return 0
                ;;
            getblock|getrawtransaction|gettransaction|listaccounts|listreceivedbyaccount|listreceivedbyaddress|sendrawtransaction)
                compreply=( $( compgen -w "true false" -- "$cur" ) )
                return 0
                ;;
            move|setaccount)
                _bitcoin_accounts
                return 0
                ;;
        esac
    fi

    case "$prev" in
        backupwallet|dumpwallet|importwallet)
            _filedir
            return 0
            ;;
        getmempool|lockunspent|setgenerate)
            compreply=( $( compgen -w "true false" -- "$cur" ) )
            return 0
            ;;
        getaccountaddress|getaddressesbyaccount|getbalance|getnewaddress|getreceivedbyaccount|listtransactions|move|sendfrom|sendmany)
            _bitcoin_accounts
            return 0
            ;;
    esac

    case "$cur" in
        -conf=*|-pid=*|-loadblock=*|-wallet=*|-rpcsslcertificatechainfile=*|-rpcsslprivatekeyfile=*)
            cur="${cur#*=}"
            _filedir
            return 0
            ;;
        -datadir=*)
            cur="${cur#*=}"
            _filedir -d
            return 0
            ;;
        -*=*)	# prevent nonsense completions
            return 0
            ;;
        *)
            local helpopts commands

            # only parse --help if senseful
            if [[ -z "$cur" || "$cur" =~ ^- ]]; then
                helpopts=$($bitcoind --help 2>&1 | awk '$1 ~ /^-/ { sub(/=.*/, "="); print $1 }' )
            fi

            # only parse help if senseful
            if [[ -z "$cur" || "$cur" =~ ^[a-z] ]]; then
                commands=$(_bitcoin_rpc help 2>/dev/null | awk '$1 ~ /^[a-z]/ { print $1; }')
            fi

            compreply=( $( compgen -w "$helpopts $commands" -- "$cur" ) )

            # prevent space if an argument is desired
            if [[ $compreply == *= ]]; then
                compopt -o nospace
            fi
            return 0
            ;;
    esac
}

complete -f _bitcoind bitcoind bitcoin-cli
}

# local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# end:
# ex: ts=4 sw=4 et filetype=sh
